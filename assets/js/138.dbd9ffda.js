(window.webpackJsonp=window.webpackJsonp||[]).push([[138],{867:function(t,e,a){"use strict";a.r(e);var v=a(13),r=Object(v.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"前置知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前置知识"}},[t._v("#")]),t._v(" 前置知识")]),t._v(" "),a("p",[t._v("git 在我们开发中几乎每天都要接触到，但是大多数时候却仅仅是熟悉常用的几个 git 命令，此次算是总结和记录一些 git 命令的使用，也进一步的了解 git及怎样在工作开发中正确使用git版本管理 。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/06/06/UpLvKRZwyW1eG9o.jpg",alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("仓库")])]),t._v(" "),a("ol",[a("li",[t._v("Remote: 远程主仓库；")]),t._v(" "),a("li",[t._v("Repository： 本地仓库；")]),t._v(" "),a("li",[t._v("Index： Git追踪树,暂存区；")]),t._v(" "),a("li",[t._v("workspace： 本地工作区（即你编辑器的代码）")])]),t._v(" "),a("h2",{attrs:{id:"git-命名规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-命名规范"}},[t._v("#")]),t._v(" git 命名规范")]),t._v(" "),a("p",[t._v("一个项目的分支，一般包括主干 master 和 开发分支 dev，以及若干临时分支")]),t._v(" "),a("p",[a("strong",[t._v("分支命名规范")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("分支:\t\t命名:\t\t说明:\n \n主分支\t\tmaster\t\t主分支，所有提供给用户使用的正式版本，都在这个主分支上发布\n开发分支\t\tdev \t\t开发分支，永远是功能最新最全的分支\n功能分支\t\tfeature-* (分支功能/分支名)\t新功能分支，某个功能点正在开发阶段,一般开发新功能时，feature 分支都是基于 develop 分支下创建的\n发布版本\t\trelease-*\t发布定期要上线的功能，发布分支是从develop分支上面分出来的，预发布结束以后，必须合并进develop和master分支\n修复分支\t\tbug-*\t\t修复线上代码的 bug\n验证分支\t\tdemo-*      技术调研，完成后删除该分支\n")])])]),a("p",[a("strong",[t._v("commit 命名规范")])]),t._v(" "),a("ul",[a("li",[t._v("feat:一个新功能")]),t._v(" "),a("li",[t._v("fix：bug修复")]),t._v(" "),a("li",[t._v("docs：仅仅修改了文档，比如 README, CHANGELOG, CONTRIBUTE 等")]),t._v(" "),a("li",[t._v("style：不影响代码逻辑的修改，比如空格、格式缩进、删除分号等")]),t._v(" "),a("li",[t._v("refactor：代码重构")]),t._v(" "),a("li",[t._v("perf：提升性能的改动")]),t._v(" "),a("li",[t._v("test：增加或修改测试")]),t._v(" "),a("li",[t._v("chore: 改变构建流程、或者增加辅助工具、依赖库等")])]),t._v(" "),a("h2",{attrs:{id:"git-常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-常用命令"}},[t._v("#")]),t._v(" git 常用命令")]),t._v(" "),a("p",[a("strong",[t._v("1.  初始开发git操作")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git clone 地址")]),t._v(": 克隆最新主分支项目代码")]),t._v(" "),a("li",[a("code",[t._v("git branch 分支名")]),t._v(":创建本地分支")]),t._v(" "),a("li",[a("code",[t._v("git branch")]),t._v(":查看本地分支")]),t._v(" "),a("li",[a("code",[t._v("git branch -a")]),t._v(":列出所有本地分支和远程分支")]),t._v(" "),a("li",[a("code",[t._v("git checkout 分支名")]),t._v(":切换分支")]),t._v(" "),a("li",[a("code",[t._v("git push <远程仓库> <本地分支>:<远程分支>")]),t._v(":将本地分支推送到远程分支")])]),t._v(" "),a("p",[a("strong",[t._v("2.  git fetch")])]),t._v(" "),a("p",[t._v("将远端所有分支和标签的变更都拉到本地")]),t._v(" "),a("p",[a("strong",[t._v("3.  git pull")])]),t._v(" "),a("p",[t._v("取回远程仓库的变化，并与本地分支合并( git pull = git fetch + git merge)")]),t._v(" "),a("p",[a("strong",[t._v("4.  git commit")])]),t._v(" "),a("p",[t._v("代码提交")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git commit -m [message] :提交暂存区到仓库区\ngit commit --amend :使用一次新的commit，替代上一次提交,如果代码没有任何新变化，则用来改写上一次commit的提交信息\n")])])]),a("p",[a("strong",[t._v("5.  git push")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git push origin tagname 推送某个标签到远程\ngit push origin --tags 一次性推送全部尚未推送到远程的本地标签\ngit push -d origin branchName 删除远程分支(--delete)\ngit push origin :refs/tags/<tagname> 删除远程标签<tagname>\n")])])]),t._v(" "),a("p",[a("strong",[t._v("6.  git merge")])]),t._v(" "),a("p",[t._v("git merge --no-ff branchName ：刻意制造分叉，保留合并分支的提交记录。")]),t._v(" "),a("p",[a("strong",[t._v("7.  git reset")])]),t._v(" "),a("p",[a("code",[t._v("git reset --hard HEAD")]),t._v(" 回退到上一个版本\n"),a("code",[t._v("git reset --hard commit_id")]),t._v(" 根据commit的ID（一般写6位以上就可以了），回退到指定版本")]),t._v(" "),a("p",[t._v("更多常用命令请"),a("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考阮一峰的博客"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"git-多人协作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-多人协作"}},[t._v("#")]),t._v(" git 多人协作")]),t._v(" "),a("h3",{attrs:{id:"_1、我们拿到一个git地址-首先进行代码clone"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、我们拿到一个git地址-首先进行代码clone"}},[t._v("#")]),t._v(" 1、我们拿到一个git地址，首先进行代码clone")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 克隆仓库代码\ngit clone 'xxxxx'\n// 查看详情\ngit remote -v\n")])])]),a("h3",{attrs:{id:"_2、从develop建立功能分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、从develop建立功能分支"}},[t._v("#")]),t._v(" 2、从develop建立功能分支")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 开发新功能时，请从develop建立分支\ngit checkout -b feature-* develop\n")])])]),a("p",[t._v("在多人协作时，大家都往master和dev分支推送代码，因此需要同步线上代码\n"),a("code",[t._v("git pull origin develop")]),t._v(" 获取远程仓库中develop分支上的commits，然后把origin/develop中的内容merge到你目前的分支中")]),t._v(" "),a("p",[t._v("然后在此分支上不断完善功能")]),t._v(" "),a("h3",{attrs:{id:"_3、直到功能开发完成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、直到功能开发完成"}},[t._v("#")]),t._v(" 3、直到功能开发完成")]),t._v(" "),a("p",[t._v("功能开发完成以后合并到develop，此处暂时假定合并代码不出现冲突")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 切换分支到develop\ngit checkout develop\n// 合并分支\ngit merge --no--ff feature-*\n// 删除分支\ngit branch -d feature-*\n")])])]),a("h3",{attrs:{id:"_4、代码合并"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、代码合并"}},[t._v("#")]),t._v(" 4、代码合并")]),t._v(" "),a("p",[t._v("在功能完成后，因为我们是多人开发，所以咱们的分支是需要与主分支合并(merge)。")]),t._v(" "),a("p",[t._v("别的同事的任务完成了，早已推送到我们将要合并的develop分支上了")]),t._v(" "),a("p",[t._v("所以我们在push之前需要进行code merge ，将develop分支上的内容merge到我们当前的feature分支上")]),t._v(" "),a("p",[t._v("feature分支上已经将修改内容commit了 需要将develop分支的内容合并到当前分支，先切换分支到develop上，再获取一次更新")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git checkout develop\ngit pull\n")])])]),a("p",[t._v("获取完更新后，再切换到我们的feature分支上，将develop的内容合并到我们的feature分支上")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//切换分支\ngit chechout feature\n//合并某分支到当前分支\ngit merge develop\n")])])]),a("h3",{attrs:{id:"_5、解决冲突"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、解决冲突"}},[t._v("#")]),t._v(" 5、解决冲突")]),t._v(" "),a("p",[t._v("执行"),a("code",[t._v("git merge develop")]),t._v("后，可能会遇到代码冲突，这时候我们可以解决冲突，将不需要内容删除即可（和一同开发的小伙伴商量好）")]),t._v(" "),a("p",[t._v("最后再执行"),a("code",[t._v("git push")]),t._v(" 即可。")]),t._v(" "),a("h2",{attrs:{id:"举例-将-dev-开发线-合并到-master"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#举例-将-dev-开发线-合并到-master"}},[t._v("#")]),t._v(" 举例 将 dev 开发线 合并到 master")]),t._v(" "),a("ul",[a("li",[t._v("1 确定你在dev线，将dev代码改动全部提交")]),t._v(" "),a("li",[t._v("2 切换master，确定是最新代码，不确定就pull下，选择合并分支，见上图")]),t._v(" "),a("li",[t._v("3 在下拉的提示框中选择dev线，然后选择提交所有代码")]),t._v(" "),a("li",[t._v("4 切回到dev 继续开发")])]),t._v(" "),a("p",[t._v("重点 merge命令的本质是从别的分支，将自身没有的提交记录拉去过来（粗略的说而已）。")]),t._v(" "),a("p",[t._v("参考："),a("a",{attrs:{href:"https://juejin.im/post/5c67e70bf265da2de33f127c",target:"_blank",rel:"noopener noreferrer"}},[t._v("git 教程"),a("OutboundLink")],1),t._v("、"),a("a",{attrs:{href:"https://juejin.im/post/5ecb6b41f265da770d3dae6e",target:"_blank",rel:"noopener noreferrer"}},[t._v("使用Git进行多人协作开发"),a("OutboundLink")],1),t._v("、"),a("a",{attrs:{href:"https://www.liaoxuefeng.com/wiki/896043488029600/900375748016320",target:"_blank",rel:"noopener noreferrer"}},[t._v("廖雪峰：多人协作"),a("OutboundLink")],1),t._v("、"),a("a",{attrs:{href:"https://blog.csdn.net/qq_41732963/article/details/119942560",target:"_blank",rel:"noopener noreferrer"}},[t._v("vscode 本地分支合并远程分支，远程分支合并到本地分支"),a("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=r.exports}}]);