(window.webpackJsonp=window.webpackJsonp||[]).push([[230],{949:function(e,a,r){"use strict";r.r(a);var t=r(13),s=Object(t.a)({},(function(){var e=this,a=e.$createElement,r=e._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"更好地使用-webpack-dev-server"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#更好地使用-webpack-dev-server"}},[e._v("#")]),e._v(" 更好地使用 webpack-dev-server")]),e._v(" "),r("p",[e._v("在构建代码并部署到生产环境之前，我们需要一个本地环境，用于运行我们开发的代码。这个环境相当于提供了一个简单的服务器，用于访问 webpack 构建好的静态文件，我们日常开发时可以使用它来调试前端代码。")]),e._v(" "),r("p",[e._v("之前在第 2 小节的"),r("strong",[e._v("启动静态服务")]),e._v("部分，我们已经简单介绍过 webpack-dev-server 的使用了。webpack-dev-server 是 webpack 官方提供的一个工具，可以基于当前的 webpack 构建配置快速启动一个静态服务。当 mode 为 development 时，会具备 hot reload 的功能，即当源码文件变化时，会即时更新当前页面，以便你看到最新的效果。")]),e._v(" "),r("h2",{attrs:{id:"webpack-dev-server-的基础使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#webpack-dev-server-的基础使用"}},[e._v("#")]),e._v(" webpack-dev-server 的基础使用")]),e._v(" "),r("p",[e._v("webpack-dev-server 是一个 npm package，安装后在已经有 webpack 配置文件的项目目录下直接启动就可以：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("npm install webpack-dev-server -g\nwebpack-dev-server --mode development \n\n")])])]),r("p",[e._v("webpack-dev-server 本质上也是调用 webpack，4.x 版本的也要指定 mode，其实 webpack-dev-server 应该直接把 development 作为默认值，有兴趣的同学可以查看这个 issue："),r("a",{attrs:{href:"https://github.com/webpack/webpack-dev-server/issues/1327",target:"_blank",rel:"noopener noreferrer"}},[e._v("Default mode to development?"),r("OutboundLink")],1),e._v("。")]),e._v(" "),r("p",[e._v("建议把 webpack-dev-server 作为开发依赖安装，然后使用 npm scripts 来启动，如：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("npm install webpack-dev-server --save-dev\n\n")])])]),r("p",[e._v("package 中的 scripts 配置：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('{\n  // ...\n  "scripts": {\n    "start": "webpack-dev-server --mode development"\n  }\n}\n\n')])])]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("npm run start\n\n")])])]),r("p",[e._v("webpack-dev-server 默认使用 8080 端口，如果你使用了 html-webpack-plugin 来构建 HTML 文件，并且有一个 index.html 的构建结果，那么直接访问 http://localhost:8080/ 就可以看到 index.html 页面了。如果没有 HTML 文件的话，那么 webpack-dev-server 会生成一个展示静态资源列表的页面。")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/3/19/1623bff0f463e073?w=1822&h=284&f=png&s=42237",alt:"webpack-dev-server 资源列表"}})]),e._v(" "),r("h2",{attrs:{id:"webpack-dev-server-的配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#webpack-dev-server-的配置"}},[e._v("#")]),e._v(" webpack-dev-server 的配置")]),e._v(" "),r("p",[e._v("在 webpack 的配置中，可以通过 "),r("code",[e._v("devServer")]),e._v(" 字段来配置 webpack-dev-server，如端口设置、启动 gzip 压缩等，这里简单讲解几个常用的配置。")]),e._v(" "),r("p",[r("code",[e._v("public")]),e._v(" 字段用于指定静态服务的域名，默认是 http://localhost:8080/ ，当你使用 Nginx 来做反向代理时，应该就需要使用该配置来指定 Nginx 配置使用的服务域名。")]),e._v(" "),r("p",[r("code",[e._v("port")]),e._v(" 字段用于指定静态服务的端口，如上，默认是 8080，通常情况下都不需要改动。")]),e._v(" "),r("p",[r("code",[e._v("publicPath")]),e._v(" 字段用于指定构建好的静态文件在浏览器中用什么路径去访问，默认是 "),r("code",[e._v("/")]),e._v("，例如，对于一个构建好的文件 "),r("code",[e._v("bundle.js")]),e._v("，完整的访问路径是 "),r("code",[e._v("http://localhost:8080/bundle.js")]),e._v("，如果你配置了 "),r("code",[e._v("publicPath: 'assets/'")]),e._v("，那么上述 "),r("code",[e._v("bundle.js")]),e._v(" 的完整访问路径就是 "),r("code",[e._v("http://localhost:8080/assets/bundle.js")]),e._v("。可以使用整个 URL 来作为 "),r("code",[e._v("publicPath")]),e._v(" 的值，如 "),r("code",[e._v("publicPath: 'http://localhost:8080/assets/'")]),e._v("。"),r("strong",[e._v("如果你使用了 HMR，那么要设置 "),r("code",[e._v("publicPath")]),e._v(" 就必须使用完整的 URL")]),e._v("。")]),e._v(" "),r("blockquote",[r("p",[e._v("建议将 "),r("code",[e._v("devServer.publicPath")]),e._v(" 和 "),r("code",[e._v("output.publicPath")]),e._v(" 的值保持一致。")])]),e._v(" "),r("p",[r("code",[e._v("proxy")]),e._v(" 用于配置 webpack-dev-server 将特定 URL 的请求代理到另外一台服务器上。当你有单独的后端开发服务器用于请求 API 时，这个配置相当有用。例如：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("proxy: {\n  '/api': {\n    target: \"http://localhost:3000\", // 将 URL 中带有 /api 的请求代理到本地的 3000 端口的服务上\n    pathRewrite: { '^/api': '' }, // 把 URL 中 path 部分的 `api` 移除掉\n  },\n}\n\n")])])]),r("p",[e._v("webpack-dev-server 的 proxy 功能是使用 "),r("a",{attrs:{href:"https://github.com/chimurai/http-proxy-middleware",target:"_blank",rel:"noopener noreferrer"}},[e._v("http-proxy-middleware"),r("OutboundLink")],1),e._v(" 来实现的，如果需要更详细的 proxy 配置，可以参考官方文档 "),r("a",{attrs:{href:"https://github.com/chimurai/http-proxy-middleware#example",target:"_blank",rel:"noopener noreferrer"}},[e._v("http-proxy-middleware"),r("OutboundLink")],1),e._v("。")]),e._v(" "),r("p",[r("code",[e._v("contentBase")]),e._v(" 用于配置提供额外静态文件内容的目录，之前提到的 "),r("code",[e._v("publicPath")]),e._v(" 是配置构建好的结果以什么样的路径去访问，而 "),r("code",[e._v("contentBase")]),e._v(" 是配置额外的静态文件内容的访问路径，即那些不经过 webpack 构建，但是需要在 webpack-dev-server 中提供访问的静态资源（如部分图片等）。推荐使用绝对路径：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('// 使用当前目录下的 public\ncontentBase: path.join(__dirname, "public") \n\n// 也可以使用数组提供多个路径\ncontentBase: [path.join(__dirname, "public"), path.join(__dirname, "assets")]\n\n')])])]),r("blockquote",[r("p",[r("code",[e._v("publicPath")]),e._v(" 的优先级高于 "),r("code",[e._v("contentBase")]),e._v("。")])]),e._v(" "),r("p",[r("code",[e._v("before")]),e._v(" 和 "),r("code",[e._v("after")]),e._v(" 配置用于在 webpack-dev-server 定义额外的中间件，如")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("before(app){\n  app.get('/some/path', function(req, res) { // 当访问 /some/path 路径时，返回自定义的 json 数据\n    res.json({ custom: 'response' })\n  })\n}\n\n")])])]),r("p",[r("code",[e._v("before")]),e._v(" 在 webpack-dev-server 静态资源中间件处理之前，可以用于拦截部分请求返回特定内容，或者实现简单的数据 mock。")]),e._v(" "),r("p",[r("code",[e._v("after")]),e._v(" 在 webpack-dev-server 静态资源中间件处理之后，比较少用到，可以用于打印日志或者做一些额外处理。")]),e._v(" "),r("p",[e._v("webpack-dev-server 的配置项比较多，这里只列举了一些日常比较有用的，更多的请参考官方文档 "),r("a",{attrs:{href:"https://doc.webpack-china.org/configuration/dev-server/",target:"_blank",rel:"noopener noreferrer"}},[e._v("webpack-dev-server"),r("OutboundLink")],1),e._v("。")]),e._v(" "),r("h2",{attrs:{id:"webpack-dev-middleware"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#webpack-dev-middleware"}},[e._v("#")]),e._v(" webpack-dev-middleware")]),e._v(" "),r("p",[e._v("如果你熟悉使用 Node.js 来开发 Web 服务，使用过 "),r("a",{attrs:{href:"https://expressjs.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Express"),r("OutboundLink")],1),e._v(" 或者 "),r("a",{attrs:{href:"http://koajs.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Koa"),r("OutboundLink")],1),e._v("，那么对中间件的概念应该会有所了解。")]),e._v(" "),r("p",[e._v("简而言之，中间件就是在 Express 之类的 Web 框架中实现各种各样功能（如静态文件访问）的这一部分函数。多个中间件可以一起协同构建起一个完整的 Web 服务器。")]),e._v(" "),r("p",[e._v("不熟悉 Express 中间件概念的同学可以参考 Express 的官方文档 "),r("a",{attrs:{href:"http://www.expressjs.com.cn/guide/using-middleware.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("使用中间件"),r("OutboundLink")],1),e._v("。")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/webpack/webpack-dev-middleware",target:"_blank",rel:"noopener noreferrer"}},[e._v("webpack-dev-middleware"),r("OutboundLink")],1),e._v(" 就是在 Express 中提供 webpack-dev-server 静态服务能力的一个中间件，我们可以很轻松地将其集成到现有的 Express 代码中去，就像添加一个 Express 中间件那么简单。")]),e._v(" "),r("p",[e._v("首先安装 webpack-dev-middleware 依赖：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("npm install webpack-dev-middleware --save-dev\n\n")])])]),r("p",[e._v("接着创建一个 Node.js 服务的脚本文件，如 app.js：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("const webpack = require('webpack')\nconst middleware = require('webpack-dev-middleware')\nconst webpackOptions = require('./webpack.config.js') // webpack 配置文件的路径\n\n// 本地的开发环境默认就是使用 development mode\nwebpackOptions.mode = 'development'\n\nconst compiler = webpack(webpackOptions)\nconst express = require('express')\nconst app = express()\n\napp.use(middleware(compiler, {\n  // webpack-dev-middleware 的配置选项\n}))\n\n// 其他 Web 服务中间件\n// app.use(...)\n\napp.listen(3000, () => console.log('Example app listening on port 3000!'))\n\n")])])]),r("p",[e._v("然后用 Node.js 运行该文件即可：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("node app.js # 使用刚才创建的 app.js 文件\n\n")])])]),r("p",[e._v("使用 webpack-dev-server 的好处是相对简单，直接安装依赖后执行命令即可，而使用 webpack-dev-middleware 的好处是可以在既有的 Express 代码基础上快速添加 webpack-dev-server 的功能，同时利用 Express 来根据需要添加更多的功能，如 mock 服务、代理 API 请求等。")]),e._v(" "),r("p",[e._v("其实 webpack-dev-server 也是基于 Express 开发的，前面提及的 webpack-dev-server 中 "),r("code",[e._v("before")]),e._v(" 或 "),r("code",[e._v("after")]),e._v(" 的配置字段，也可以用于编写特定的中间件来根据需要添加额外的功能。")]),e._v(" "),r("h2",{attrs:{id:"实现一个简单的-mock-服务"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#实现一个简单的-mock-服务"}},[e._v("#")]),e._v(" 实现一个简单的 mock 服务")]),e._v(" "),r("p",[e._v("在前端的日常开发工作中，我们本地需要的不仅仅是提供静态内容访问的服务，还需要模拟后端 API 数据来做一些应用测试工作，这个时候我们需要一个 mock 数据的服务，而 webpack-dev-server 的 "),r("code",[e._v("before")]),e._v(" 或 "),r("code",[e._v("proxy")]),e._v(" 配置，又或者是 webpack-dev-middleware 结合 Express，都可以帮助我们来实现简单的 mock 服务。")]),e._v(" "),r("p",[e._v("这一部分内容涉及比较多的 Node.js 代码实现，这里不做过于详细的例子解释，只提供一些实现的思路。")]),e._v(" "),r("p",[e._v("我们最主要的需求是当浏览器请求某一个特定的路径时（如 /some/path ），可以访问我们想要的数据内容。")]),e._v(" "),r("p",[e._v("我们先基于 Express app 实现一个简单 mock 功能的方法：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("module.export = function mock(app) {\n  app.get('/some/path', (req, res) => {\n    res.json({ data: '' })\n  })\n\n  // ... 其他的请求 mock\n  // 如果 mock 代码过多，可以将其拆分成多个代码文件，然后 require 进来\n}\n\n")])])]),r("p",[e._v("然后应用到配置中的 "),r("code",[e._v("before")]),e._v(" 字段：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("const mock = require('./mock')\n\n// ...\nbefore(app) {\n  mock(app) // 调用 mock 函数\n}\n\n")])])]),r("p",[e._v("这样的 "),r("code",[e._v("mock")]),e._v(" 函数照样可以应用到 Express 中去，提供与 webpack-dev-middleware 同样的功能。")]),e._v(" "),r("p",[e._v("由于 "),r("code",[e._v("app.get('', (req, res) => { ... })")]),e._v(" 的 callback 可以拿到 "),r("code",[e._v("req")]),e._v(" 请求对象，其实可以根据请求参数来改变返回的结果，即通过参数来模拟多种场景的返回数据来协助测试多种场景下的代码应用。")]),e._v(" "),r("p",[e._v("当你单独实现或者使用一个 mock 服务时，你可以通过 proxy 来配置部分路径代理到对应的 mock 服务上去，从而把 mock 服务集成到当前的开发服务中去，相对来说也很简单。")]),e._v(" "),r("p",[e._v("当你和后端开发进行联调时，亦可使用 proxy 代理到对应联调使用的机器上，从而可以使用本地前端代码的开发环境来进行联调。当然了，连线上环境的异常都可以这样来尝试定位问题。")]),e._v(" "),r("h2",{attrs:{id:"小结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[e._v("#")]),e._v(" 小结")]),e._v(" "),r("p",[e._v("本小节介绍了 webpack-dev-server 的基础使用及其更多的一些配置选项，如何使用 webpack-dev-middleware 来将 webpack 的开发环境集成到现有的 Node 服务中去，以及如何在 webpack-dev-server 和 webpack-dev-middleware 的基础上实现简单的 mock 服务。")]),e._v(" "),r("h2",{attrs:{id:"例子"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#例子"}},[e._v("#")]),e._v(" 例子")]),e._v(" "),r("p",[e._v("本小节提及的一些简单的 Demo 可以在 "),r("a",{attrs:{href:"https://github.com/teabyii/webpack-examples",target:"_blank",rel:"noopener noreferrer"}},[e._v("webpack-examples"),r("OutboundLink")],1),e._v(" 找到。")])])}),[],!1,null,null,null);a.default=s.exports}}]);