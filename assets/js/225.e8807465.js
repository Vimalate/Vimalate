(window.webpackJsonp=window.webpackJsonp||[]).push([[225],{944:function(e,n,a){"use strict";a.r(n);var s=a(13),t=Object(s.a)({},(function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"开发和生产环境的构建配置差异"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开发和生产环境的构建配置差异"}},[e._v("#")]),e._v(" 开发和生产环境的构建配置差异")]),e._v(" "),a("p",[e._v("我们在日常的前端开发工作中，一般都会有两套构建环境：一套开发时使用，构建结果用于本地开发调试，不进行代码压缩，打印 debug 信息，包含 sourcemap 文件；另外一套构建后的结果是直接应用于线上的，即代码都是压缩后，运行时不打印 debug 信息，静态文件不包括 sourcemap 的。有的时候可能还需要多一套测试环境，在运行时直接进行请求 mock 等工作。")]),e._v(" "),a("p",[e._v("webpack 4.x 版本引入了 mode 的概念，在运行 webpack 时需要指定使用 production 或 development 两个 mode 其中一个，这个功能也就是我们所需要的运行两套构建环境的能力。")]),e._v(" "),a("p",[e._v("当你指定使用 production mode 时，默认会启用各种性能优化的功能，包括构建结果优化以及 webpack 运行性能优化，而如果是 development mode 的话，则会开启 debug 工具，运行时打印详细的错误信息，以及更加快速的增量编译构建。关于这两个 mode 的更详细区别，可以查阅 webpack 作者的这篇文章："),a("a",{attrs:{href:"https://medium.com/webpack/webpack-4-mode-and-optimization-5423a6bc597a",target:"_blank",rel:"noopener noreferrer"}},[e._v("webpack 4: mode and optimization"),a("OutboundLink")],1),e._v("。")]),e._v(" "),a("p",[e._v("虽然 webpack 的 mode 参数已经给我们带来了一些很方便的环境差异化配置，但是针对一些项目情况，例如使用 css-loader 或者 url-loader 等，不同环境传入 loader 的配置也不一样，而 mode 并没有帮助我们做这些事情，因此有些配置还是需要手动区分环境后来进行调整。")]),e._v(" "),a("h2",{attrs:{id:"在配置文件中区分-mode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在配置文件中区分-mode"}},[e._v("#")]),e._v(" 在配置文件中区分 mode")]),e._v(" "),a("p",[e._v("之前我们的配置文件都是直接对外暴露一个 JS 对象，这种方式暂时没有办法获取到 webpack 的 mode 参数，我们需要更换一种方式来处理配置。根据官方的文档"),a("a",{attrs:{href:"https://doc.webpack-china.org/configuration/configuration-types/",target:"_blank",rel:"noopener noreferrer"}},[e._v("多种配置类型"),a("OutboundLink")],1),e._v("，配置文件可以对外暴露一个函数，因此我们可以这样做：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("module.exports = (env, argv) => ({\n  // ... 其他配置\n  optimization: {\n    minimize: false,\n    // 使用 argv 来获取 mode 参数的值\n    minimizer: argv.mode === 'production' ? [\n      new UglifyJsPlugin({ /* 你自己的配置 */ }), \n      // 仅在我们要自定义压缩配置时才需要这么做\n      // mode 为 production 时 webpack 会默认使用压缩 JS 的 plugin\n    ] : [],\n  },\n})\n\n")])])]),a("p",[e._v("这样获取 mode 之后，我们就能够区分不同的构建环境，然后根据不同环境再对特殊的 loader 或 plugin 做额外的配置就可以了。")]),e._v(" "),a("p",[e._v("以上是 webpack 4.x 的做法，由于有了 mode 参数，区分环境变得简单了。不过在当前业界，估计还是使用 webpack 3.x 版本的居多，所以这里也简单介绍一下 3.x 如何区分环境。")]),e._v(" "),a("p",[e._v("webpack 的运行时环境是 Node.js，我们可以通过 Node.js 提供的机制给要运行的 webpack 程序传递环境变量，来控制不同环境下的构建行为。例如，我们在 npm 中的 "),a("code",[e._v("scripts")]),e._v(" 字段添加一个用于生产环境的构建命令：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{\n  "scripts": {\n    "build": "NODE_ENV=production webpack",\n    "develop": "NODE_ENV=development webpack-dev-server"\n  }\n}\n\n')])])]),a("p",[e._v("然后在 "),a("code",[e._v("webpack.config.js")]),e._v(" 文件中可以通过 "),a("code",[e._v("process.env.NODE_ENV")]),e._v(" 来获取命令传入的环境变量：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const config = {\n  // ... webpack 配置\n}\n\nif (process.env.NODE_ENV === 'production') {\n  // 生产环境需要做的事情，如使用代码压缩插件等\n  config.plugins.push(new UglifyJsPlugin())\n}\n\nmodule.exports = config\n\n")])])]),a("h2",{attrs:{id:"运行时的环境变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运行时的环境变量"}},[e._v("#")]),e._v(" 运行时的环境变量")]),e._v(" "),a("p",[e._v("我们使用 webpack 时传递的 mode 参数，是可以在我们的应用代码运行时，通过 "),a("code",[e._v("process.env.NODE_ENV")]),e._v(" 这个变量获取的。这样方便我们在运行时判断当前执行的构建环境，使用最多的场景莫过于控制是否打印 debug 信息。")]),e._v(" "),a("p",[e._v("下面这个简单的例子，在应用开发的代码中实现一个简单的 console 打印封装：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("export default function log(...args) {\n  if (process.env.NODE_ENV === 'development' && console && console.log) {\n    console.log.apply(console, args)\n  }\n}\n\n")])])]),a("p",[e._v("同样，以上是 webpack 4.x 的做法，下面简单介绍一下 3.x 版本应该如何实现。这里需要用到 "),a("a",{attrs:{href:"https://doc.webpack-china.org/plugins/define-plugin",target:"_blank",rel:"noopener noreferrer"}},[e._v("DefinePlugin"),a("OutboundLink")],1),e._v(" 插件，它可以帮助我们在构建时给运行时定义变量，那么我们只要在前面 webpack 3.x 版本区分构建环境的例子的基础上，再使用 DefinePlugin 添加环境变量即可影响到运行时的代码。")]),e._v(" "),a("p",[e._v("在 webpack 的配置中添加 DefinePlugin 插件：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("module.exports = {\n  // ...\n  // webpack 的配置\n\n  plugins: [\n    new webpack.DefinePlugin({\n      // webpack 3.x 的 process.env.NODE_ENV 是通过手动在命令行中指定 NODE_ENV=... 的方式来传递的\n      'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),\n    }),\n  ],\n}\n\n")])])]),a("h2",{attrs:{id:"常见的环境差异配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见的环境差异配置"}},[e._v("#")]),e._v(" 常见的环境差异配置")]),e._v(" "),a("p",[e._v("前面提及的使用环境变量的方式可以让我们在不同的构建环境中完成不同的构建需求，这里列举一下常见的 webpack 构建差异配置：")]),e._v(" "),a("ul",[a("li",[e._v("生产环境可能需要分离 CSS 成单独的文件，以便多个页面共享同一个 CSS 文件")]),e._v(" "),a("li",[e._v("生产环境需要压缩 HTML/CSS/JS 代码")]),e._v(" "),a("li",[e._v("生产环境需要压缩图片")]),e._v(" "),a("li",[e._v("开发环境需要生成 sourcemap 文件")]),e._v(" "),a("li",[e._v("开发环境需要打印 debug 信息")]),e._v(" "),a("li",[e._v("开发环境需要 live reload 或者 hot reload 的功能")])]),e._v(" "),a("p",[e._v("以上是常见的构建环境需求差异，可能更加复杂的项目中会有更多的构建需求（如划分静态域名等），但是我们都可以通过判断环境变量来实现这些有环境差异的构建需求。")]),e._v(" "),a("p",[e._v("webpack 4.x 的 mode 已经提供了上述差异配置的大部分功能，mode 为 production 时默认使用 JS 代码压缩，而 mode 为 development 时默认启用 hot reload，等等。这样让我们的配置更为简洁，我们只需要针对特别使用的 loader 和 plugin 做区分配置就可以了。")]),e._v(" "),a("p",[e._v("webpack 3.x 版本还是只能自己动手修改配置来满足大部分环境差异需求，所以如果你要开始一个新的项目，建议直接使用 webpack 4.x 版本。")]),e._v(" "),a("h2",{attrs:{id:"拆分配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拆分配置"}},[e._v("#")]),e._v(" 拆分配置")]),e._v(" "),a("p",[e._v("前面我们列出了几个环境差异配置，可能这些构建需求就已经有点多了，会让整个 webpack 的配置变得复杂，尤其是有着大量环境变量判断的配置。我们可以把 webpack 的配置按照不同的环境拆分成多个文件，运行时直接根据环境变量加载对应的配置即可。基本的划分如下：")]),e._v(" "),a("ul",[a("li",[e._v("webpack.base.js：基础部分，即多个文件中共享的配置")]),e._v(" "),a("li",[e._v("webpack.development.js：开发环境使用的配置")]),e._v(" "),a("li",[e._v("webpack.production.js：生产环境使用的配置")]),e._v(" "),a("li",[e._v("webpack.test.js：测试环境使用的配置")])]),e._v(" "),a("p",[e._v("一些复杂的项目可能会有更多配置。这里介绍一下如何处理这样的配置拆分。")]),e._v(" "),a("p",[e._v("首先我们要明白，对于 webpack 的配置，其实是对外暴露一个 JS 对象，所以对于这个对象，我们都可以用 JS 代码来修改它，例如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const config = {\n  // ... webpack 配置\n}\n\n// 我们可以修改这个 config 来调整配置，例如添加一个新的插件\nconfig.plugins.push(new YourPlugin());\n\nmodule.exports = config;\n\n")])])]),a("p",[e._v("当然，如果是对外暴露一个 JS 函数的话，像本小节第一个例子那样，那么修改配置就更加容易了，这里不再举例说明。")]),e._v(" "),a("p",[e._v("因此，只要有一个工具能比较智能地合并多个配置对象，我们就可以很轻松地拆分 webpack 配置，然后通过判断环境变量，使用工具将对应环境的多个配置对象整合后提供给 webpack 使用。这个工具就是 "),a("a",{attrs:{href:"https://github.com/survivejs/webpack-merge",target:"_blank",rel:"noopener noreferrer"}},[e._v("webpack-merge"),a("OutboundLink")],1),e._v("。")]),e._v(" "),a("p",[e._v("我们的 webpack 配置基础部分，即 webpack.base.js 应该大致是这样的：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("module.exports = {\n  entry: '...',\n  output: {\n    // ...\n  },\n  resolve: {\n    // ...\n  },\n  module: {\n    // 这里是一个简单的例子，后面介绍 API 时会用到\n    rules: [\n      {\n        test: /\\.js$/, \n        use: ['babel'],\n      },\n    ],\n    // ...\n  },\n  plugins: [\n    // ...\n  ],\n}\n\n")])])]),a("p",[e._v("然后 webpack.development.js 需要添加 loader 或 plugin，就可以使用 webpack-merge 的 API，例如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const { smart } = require('webpack-merge')\nconst webpack = require('webpack')\nconst base = require('./webpack.base.js')\n\nmodule.exports = smart(base, {\n  module: {\n    rules: [\n      // 用 smart API，当这里的匹配规则相同且 use 值都是数组时，smart 会识别后处理\n      // 和上述 base 配置合并后，这里会是 { test: /\\.js$/, use: ['babel', 'coffee'] }\n      // 如果这里 use 的值用的是字符串或者对象的话，那么会替换掉原本的规则 use 的值\n      {\n        test: /\\.js$/,\n        use: ['coffee'],\n      },\n      // ...\n    ],\n  },\n  plugins: [\n    // plugins 这里的数组会和 base 中的 plugins 数组进行合并\n    new webpack.DefinePlugin({\n      'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),\n    }),\n  ],\n})\n\n")])])]),a("p",[e._v("可见 webpack-merge 提供的 "),a("code",[e._v("smart")]),e._v(" 方法，可以帮助我们更加轻松地处理 loader 配置的合并。webpack-merge 还有其他 API 可以用于自定义合并行为，这里就不详细介绍了，需要深入了解的同学可以查阅官方文档 "),a("a",{attrs:{href:"https://github.com/survivejs/webpack-merge",target:"_blank",rel:"noopener noreferrer"}},[e._v("webpack-merge"),a("OutboundLink")],1),e._v("。")]),e._v(" "),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[e._v("#")]),e._v(" 小结")]),e._v(" "),a("p",[e._v("本小节介绍了 webpack 4.x 和 3.x 如何在配置文件中区分环境来应用不同的配置选项（4.x 使用 mode 参数，3.x 使用 Node.js 的 "),a("code",[e._v("process.env.NODE_ENV")]),e._v("），如何在应用代码运行时携带当前构建环境的相关信息，以及如何利用 "),a("a",{attrs:{href:"https://github.com/survivejs/webpack-merge",target:"_blank",rel:"noopener noreferrer"}},[e._v("webpack-merge"),a("OutboundLink")],1),e._v(" 这个工具来更好地维护不同构建环境中对应的构建需求配置。")]),e._v(" "),a("h2",{attrs:{id:"例子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#例子"}},[e._v("#")]),e._v(" 例子")]),e._v(" "),a("p",[e._v("本小节提及的一些简单的 Demo 可以在 "),a("a",{attrs:{href:"https://github.com/teabyii/webpack-examples",target:"_blank",rel:"noopener noreferrer"}},[e._v("webpack-examples"),a("OutboundLink")],1),e._v(" 找到。")])])}),[],!1,null,null,null);n.default=t.exports}}]);