(window.webpackJsonp=window.webpackJsonp||[]).push([[213],{930:function(t,e,n){"use strict";n.r(e);var a=n(13),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("blockquote",[n("p",[t._v("vue3 于 2020 年 09 月 18 日，正式发布，2022 年 2 月 7 日 vue3 成为新的默认版本")])]),t._v(" "),n("p",[t._v("距离 vue3 正式发布已经过去两年有余, 成为默认版本也过去大半年了，以前还能说是对新技术、新特性的观望，到现在面试都直问 vue3 源码了。")]),t._v(" "),n("p",[t._v("我想，不管什么原因，是时候学习 vue3 了")]),t._v(" "),n("p",[t._v("所以这次我也顺便把学习的过程记录下来，算个总结，也有利于日后梳理。")]),t._v(" "),n("h2",{attrs:{id:"前置介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前置介绍"}},[t._v("#")]),t._v(" 前置介绍")]),t._v(" "),n("p",[t._v("在 vue3.2 中，我们只需在script标签中添加setup。就可以做到，组件只需引入不用注册，属性和方法也不用 return 才能于 template 中使用，也不用写setup函数，也不用写export default ，甚至是自定义指令也可以在我们的template中自动获得。")]),t._v(" "),n("p",[t._v("本次我们的学习也是在 setup 语法糖下进行。")]),t._v(" "),n("h2",{attrs:{id:"环境搭建"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#环境搭建"}},[t._v("#")]),t._v(" 环境搭建")]),t._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" init vue@latest\n")])])]),n("h2",{attrs:{id:"使用工具"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用工具"}},[t._v("#")]),t._v(" 使用工具")]),t._v(" "),n("p",[n("code",[t._v('<script setup lang="ts"> + VSCode + Volar')])]),t._v(" "),n("blockquote",[n("p",[t._v("安装 Volar 后，注意禁用 vetur")])]),t._v(" "),n("p",[t._v("好的，准备工作已经完成，下面我们开始进入到 vue3 setup 的正式学习")]),t._v(" "),n("h2",{attrs:{id:"ref-和-reactive"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ref-和-reactive"}},[t._v("#")]),t._v(" ref 和 reactive")]),t._v(" "),n("ul",[n("li",[t._v("ref: 用来给基本数据类型绑定响应式数据，访问时需要通过 .value 的形式， tamplate 会自动解析,不需要 .value")]),t._v(" "),n("li",[t._v("reactive: 用来给 复杂数据类型 绑定响应式数据，直接访问即可")])]),t._v(" "),n("blockquote",[n("p",[t._v("ref其实也是内部调用来reactive实现的")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<template>\n  <div>\n    <p>{{title}}</p>\n    <h4>{{userInfo}}</h4>\n  </div>\n</template>\n\n<script setup lang="ts">\nimport { ref, reactive } from "vue";\ntype Person = {\n    name: string;\n    age: number;\n    gender?: string;\n};\nconst title = ref<string>("彼时彼刻，恰如此时此刻");\nconst userInfo = reactive<Person>({\n  name: \'树哥\',\n  age: 18\n})\n<\/script>\n')])])]),n("h2",{attrs:{id:"toref、torefs、toraw"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#toref、torefs、toraw"}},[t._v("#")]),t._v(" toRef、toRefs、toRaw")]),t._v(" "),n("h3",{attrs:{id:"toref"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#toref"}},[t._v("#")]),t._v(" toRef")]),t._v(" "),n("p",[t._v("toRef 如果原始对象是非响应式的,数据会变,但不会更新视图")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<template>\n  <div>\n     <button @click=\"change\">按钮</button>\n     {{state}}\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { reactive, toRef } from 'vue'\n\nconst obj = {\n  name: '树哥',\n  age: 18\n}\n\nconst state = toRef(obj, 'age')\n\nconst change = () => {\n  state.value++\n  console.log('obj:',obj,'state:', state);\n}\n<\/script>\n")])])]),n("p",[n("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3318d3d2f895427f99bd10444f3c5af3~tplv-k3u1fbpfcp-watermark.image?",alt:"toRef.png"}})]),t._v(" "),n("p",[t._v("可以看到，点击按钮，当原始对象是非响应式时，使用toRef 的数据改变，但是试图并没有更新")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<template>\n  <div>\n    <button @click=\"change\">按钮</button>\n    {{state}}\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { reactive, toRef } from 'vue'\n\nconst obj = reactive({\n  name: '树哥',\n  age: 18\n})\n\nconst state = toRef(obj, 'age')\n\nconst change = () => {\n  state.value++\n  console.log('obj:', obj, 'state:', state);\n}\n<\/script>\n")])])]),n("p",[n("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b9d0bbbe7f1545e18c615cfc4164ea9d~tplv-k3u1fbpfcp-watermark.image?",alt:"toRef1.png"}})]),t._v(" "),n("p",[t._v("当我们把 obj 用 reactive 包裹，再使用 toRef，点击按钮时，可以看到视图和数据都变了")]),t._v(" "),n("blockquote",[n("p",[t._v("toRef返回的值是否具有响应性取决于被解构的对象本身是否具有响应性。响应式数据经过toRef返回的值仍具有响应性，非响应式数据经过toRef返回的值仍没有响应性。")])]),t._v(" "),n("h3",{attrs:{id:"torefs"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#torefs"}},[t._v("#")]),t._v(" toRefs")]),t._v(" "),n("p",[t._v("toRefs相当于对对象内每个属性调用toRef，toRefs返回的对象内的属性使用时需要加.value,主要是方便我们解构使用")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<template>\n  <div>\n    <button @click=\"change\">按钮</button>\n    name--{{name}}---age{{age}}\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { reactive, toRefs } from 'vue'\n\nconst obj = reactive({\n  name: '树哥',\n  age: 18\n})\n\nlet { name, age } = toRefs(obj)\n\nconst change = () => {\n  age.value++\n  name.value = '张麻子'\n  console.log('obj:', obj);\n  console.log('name:', name);\n  console.log('age:', age);\n}\n<\/script>\n")])])]),n("p",[t._v("简单理解就是批量版的toRef,("),n("strong",[t._v("其源码实现也正是通过对象循环调用了toRef")]),t._v(")")]),t._v(" "),n("h2",{attrs:{id:"toraw"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#toraw"}},[t._v("#")]),t._v(" toRaw")]),t._v(" "),n("p",[t._v("将响应式对象修改为普通对象")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<template>\n  <div>\n    <button @click=\"change\">按钮</button>\n    {{data}}\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { reactive, toRaw } from 'vue'\n\nconst obj = reactive({\n  name: '树哥',\n  age: 18\n})\n\nconst data = toRaw(obj)\n\nconst change = () => {\n  data.age = 19\n  console.log('obj:', obj, 'data:', data);\n}\n<\/script>\n")])])]),n("p",[n("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/92749f19830c49cf98f3b4f5adc691de~tplv-k3u1fbpfcp-watermark.image?",alt:"toRaw.png"}})]),t._v(" "),n("p",[t._v("数据能变化，视图不变化(失去响应式)")]),t._v(" "),n("h2",{attrs:{id:"computed"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#computed"}},[t._v("#")]),t._v(" computed")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<template>\n  <div>\n    <p>{{title}}</p>\n    <h4>{{userInfo}}</h4>\n    <h1>{{add}}</h1>\n  </div>\n</template>\n\n<script setup lang="ts">\nimport { ref, reactive,computed } from "vue";\nconst count = ref(0)\n\n// 推导得到的类型：ComputedRef<number>\nconst add = computed(() => count.value +1)\n\n<\/script>\n')])])]),n("h2",{attrs:{id:"watch"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#watch"}},[t._v("#")]),t._v(" watch")]),t._v(" "),n("p",[t._v("vue3 watch 的作用和 Vue2 中的 watch 作用是一样的，他们都是用来监听响应式状态发生变化的，当响应式状态发生变化时，就会触发一个回调函数。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("watch(data,()=>{},{})\n")])])]),n("ul",[n("li",[n("p",[t._v("参数一，监听的数据")])]),t._v(" "),n("li",[n("p",[t._v("参数二，数据改变时触发的回调函数（newVal,oldVal）")])]),t._v(" "),n("li",[n("p",[t._v("参数三，options配置项，为一个对象")])]),t._v(" "),n("li",[n("p",[t._v("1、监听ref定义的一个响应式数据")])])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<script setup lang=\"ts\">\nimport { ref, watch } from \"vue\";\n\nconst str = ref('彼时彼刻')\n\n//3s后改变str的值\nsetTimeout(() => { str.value = '恰如此时此刻' }, 3000)\n\nwatch(str, (newV, oldV) => {\n  console.log(newV, oldV) //恰如此时此刻 彼时彼刻\n})\n\n<\/script>\n")])])]),n("ul",[n("li",[t._v("2、监听多个ref")])]),t._v(" "),n("p",[n("strong",[t._v("这时候写法变为数组的形式")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<script setup lang=\"ts\">\nimport { ref, watch } from \"vue\";\n\nlet name = ref('树哥')\nlet age = ref(18)\n\n//3s后改变值\nsetTimeout(() => {\n  name.value = '我叫树哥'\n  age.value = 19\n}, 3000)\n\nwatch([name, age], (newV, oldV) => {\n  console.log(newV, oldV) // ['我叫树哥', 19]  ['树哥', 18]\n})\n\n<\/script>\n")])])]),n("ul",[n("li",[t._v("3、监听Reactive定义的响应式对象")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<script setup lang="ts">\nimport { reactive, watch } from "vue";\n\nlet info = reactive({\n  name: \'树哥\',\n  age: 18\n})\n\n//3s后改变值\nsetTimeout(() => {\n  info.age = 19\n}, 3000)\n\nwatch(info, (newV, oldV) => {\n  console.log(newV, oldV) \n})\n\n<\/script>\n')])])]),n("p",[t._v("当 watch 监听的是一个响应式对象时，会隐式地创建一个深层侦听器，即该响应式对象里面的任何属性发生变化，都会触发监听函数中的回调函数。"),n("strong",[t._v("即当 watch 监听的是一个响应式对象时，默认开启 deep：true")])]),t._v(" "),n("ul",[n("li",[t._v("4、监听reactive 定义响应式对象的单一属性")])]),t._v(" "),n("p",[t._v("错误写法：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<script setup lang="ts">\nimport { reactive, watch } from "vue";\n\nlet info = reactive({\n  name: \'树哥\',\n  age: 18\n})\n\n//3s后改变值\nsetTimeout(() => {\n  info.age = 19\n}, 3000)\n\n\nwatch(info.age, (newV, oldV) => {\n  console.log(newV, oldV) \n})\n\n<\/script>\n')])])]),n("p",[t._v("可以看到控制台出现警告")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("[Vue warn]: Invalid watch source:  18 A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types. \n  at <Index> \n  at <App>\n")])])]),n("p",[t._v("如果我们非要监听响应式对象中的某个属性，我们可以使用 getter 函数的形式,"),n("strong",[t._v("即将watch第一个参数修改成一个回调函数的形式")])]),t._v(" "),n("p",[t._v("正确写法：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 其他不变\nwatch(()=>info.age, (newV, oldV) => {\n  console.log(newV, oldV) // 19 18\n})\n")])])]),n("ul",[n("li",[t._v("5、监听reactive定义的 引用数据")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<script setup lang=\"ts\">\nimport { reactive, watch } from \"vue\";\n\nlet info = reactive({\n  name: '张麻子',\n  age: 18,\n  obj: {\n    str: '彼时彼刻，恰如此时此刻'\n  }\n})\n\n//3s后改变s值\nsetTimeout(() => {\n  info.obj.str = 'to be or not to be'\n}, 3000)\n\n// 需要自己开启 deep:true深度监听,不然不发触发 watch 的回调函数\nwatch(() => info.obj, (newV, oldV) => {\n  console.log(newV, oldV)\n}, {\n  deep: true\n})\n\n<\/script>\n")])])]),n("h2",{attrs:{id:"watcheffect"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#watcheffect"}},[t._v("#")]),t._v(" WatchEffect")]),t._v(" "),n("p",[t._v("会立即执行传入的一个函数，同时响应式追踪其依赖，并在其依赖变更时重新运行该函数。（有点像计算属性）")]),t._v(" "),n("p",[t._v("如果用到 a 就只会监听 a, 就是用到几个监听几个 而且是非惰性,会默认调用一次")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<script setup lang="ts">\nimport { ref, watchEffect } from "vue";\n\nlet num = ref(0)\n\n//3s后改变值\nsetTimeout(() => {\n  num.value++\n}, 3000)\n\nwatchEffect(() => {\n  console.log(\'num 值改变：\', num.value)\n})\n\n<\/script>\n')])])]),n("p",[t._v("可以在控制台上看到，第一次进入页面时，打印出"),n("code",[t._v("num 值改变：0")]),t._v(",三秒后，再次打印"),n("code",[t._v("num 值改变：1")])]),t._v(" "),n("ul",[n("li",[t._v("停止监听")])]),t._v(" "),n("p",[t._v("当 watchEffect 在组件的 setup() 函数或生命周期钩子被调用时，侦听器会被链接到该组件的生命周期，并在组件卸载时自动停止。")]),t._v(" "),n("p",[t._v("但是我们采用异步的方式创建了一个监听器，这个时候监听器没有与当前组件绑定，所以即使组件销毁了，监听器依然存在。")]),t._v(" "),n("p",[t._v("这个时候我们可以显式调用停止监听")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<script setup lang=\"ts\">\nimport { watchEffect } from 'vue'\n// 它会自动停止\nwatchEffect(() => {})\n// ...这个则不会！\nsetTimeout(() => {\n  watchEffect(() => {})\n}, 100)\n\nconst stop = watchEffect(() => {\n  /* ... */\n})\n\n// 显式调用\nstop()\n<\/script>\n")])])]),n("ul",[n("li",[t._v("清除副作用（onInvalidate）")])]),t._v(" "),n("p",[t._v("watchEffect 的第一个参数——effect函数——可以接收一个参数：叫onInvalidate，也是一个函数，用于清除 effect 产生的副作用")]),t._v(" "),n("p",[t._v("就是在触发监听之前会调用一个函数可以处理你的逻辑，例如防抖")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import { ref, watchEffect } from \"vue\";\n\nlet num = ref(0)\n\n//3s后改变值\nsetTimeout(() => {\n  num.value++\n}, 3000)\n\nwatchEffect((onInvalidate) => {\n  console.log(num.value)\n  onInvalidate(() => {\n    console.log('执行');\n  });\n})\n")])])]),n("p",[t._v("控制台依次输出：0 => 执行 => 1")]),t._v(" "),n("ul",[n("li",[t._v("配置选项")])]),t._v(" "),n("p",[t._v("watchEffect的第二个参数，用来定义副作用刷新时机，可以作为一个调试器来使用")]),t._v(" "),n("p",[t._v("flush （更新时机）：")]),t._v(" "),n("ul",[n("li",[t._v("1、pre：组件更新前执行")]),t._v(" "),n("li",[t._v("2、sync：强制效果始终同步触发")]),t._v(" "),n("li",[t._v("3、post：组件更新后执行")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<script setup lang="ts">\nimport { ref, watchEffect } from "vue";\n\nlet num = ref(0)\n\n//3s后改变值\nsetTimeout(() => {\n  num.value++\n}, 3000)\n\nwatchEffect((onInvalidate) => {\n  console.log(num.value)\n  onInvalidate(() => {\n    console.log(\'执行\');\n  });\n}, {\n  flush: "post", //此时这个函数会在组件更新之后去执行\n  onTrigger(e) { //作为一个调试工具，可在开发中方便调试\n    console.log(\'触发\', e);\n  },\n})\n<\/script>\n')])])]),n("h2",{attrs:{id:"生命周期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[t._v("#")]),t._v(" 生命周期")]),t._v(" "),n("p",[t._v("和 vue2 相比的话，基本上就是将 Vue2 中的beforeDestroy名称变更成beforeUnmount; destroyed 表更为 unmounted；然后用setup代替了两个钩子函数 beforeCreate 和 created；新增了两个开发环境用于调试的钩子")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9d0471468f464abbaa0ecc656fb21591~tplv-k3u1fbpfcp-watermark.image?",alt:"smzq.jpg"}})]),t._v(" "),n("h2",{attrs:{id:"父子组件传参"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#父子组件传参"}},[t._v("#")]),t._v(" 父子组件传参")]),t._v(" "),n("ul",[n("li",[t._v("defineProps")])]),t._v(" "),n("p",[t._v("父组件传参")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<template>\n  <Children :msg=\"msg\" :list=\"list\"></Children>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, reactive } from 'vue'\nimport Children from './Children.vue'\n\nconst msg = ref('hello 啊，树哥')\nconst list = reactive<number[]>([1, 2, 3])\n<\/script>\n")])])]),n("blockquote",[n("p",[t._v("在 script setup 中，引入的组件会自动注册，所以可以直接使用，无需再通过components进行注册")])]),t._v(" "),n("p",[t._v("子组件接受值")]),t._v(" "),n("p",[t._v("defineProps 来接收父组件传递的值， "),n("strong",[t._v("defineProps是无须引入的直接使用即可")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<template>\n  <div>\n    <p>msg：{{msg}}</p>\n    <p>list：{{list}}</p>\n  </div>\n</template>\n\n<script setup lang="ts">\ndefineProps<{\n  msg: string,\n  list: number[]\n}>()\n<\/script>\n')])])]),n("p",[t._v("使用 withDefaults 定义默认值")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<template>\n  <div>\n    <p>msg：{{msg}}</p>\n    <p>list：{{list}}</p>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\ntype Props = {\n  msg?: string,\n  list?: number[]\n}\n\n// withDefaults 的第二个参数便是默认参数设置，会被编译为运行时 props 的 default 选项\nwithDefaults(defineProps<Props>(), {\n  msg: '张麻子',\n  list: () => [4, 5, 6]\n})\n<\/script>\n")])])]),n("p",[t._v("子组件向父组件抛出事件")]),t._v(" "),n("ul",[n("li",[t._v("defineEmits")])]),t._v(" "),n("p",[t._v("子组件派发事件")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<template>\n  <div>\n    <p>msg：{{msg}}</p>\n    <p>list：{{list}}</p>\n    <button @click=\"onChangeMsg\">改变msg</button>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\ntype Props = {\n  msg?: string,\n  list?: number[]\n}\n\nwithDefaults(defineProps<Props>(), {\n  msg: '张麻子',\n  list: () => [4, 5, 6]\n})\n\nconst emits = defineEmits(['changeMsg'])\nconst onChangeMsg = () => {\nemits('changeMsg','黄四郎')\n}\n<\/script>\n")])])]),n("p",[t._v("子组件绑定了一个click 事件 然后通过defineEmits 注册了一个自定义事件,点击按钮的时候，触发 emit 调用我们注册的事件，传递参数")]),t._v(" "),n("p",[t._v("父组件接收")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<template>\n  <Children :msg="msg" :list="list" @changeMsg="changeMsg"></Children>\n</template>\n\n<script setup lang="ts">\nimport { ref, reactive } from \'vue\'\nimport Children from \'./Children.vue\'\n\nconst msg = ref(\'hello 啊，树哥\')\nconst list = reactive<number[]>([1, 2, 3])\n\nconst changeMsg = (v: string) => {\n  msg.value = v\n}\n<\/script>\n')])])]),n("ul",[n("li",[t._v("获取子组件的实例和内部属性")])]),t._v(" "),n("p",[t._v("在 script-setup 模式下，所有数据只是默认 return 给 template 使用，不会暴露到组件外，所以父组件是无法直接通过挂载 ref 变量获取子组件的数据。")]),t._v(" "),n("p",[t._v("如果要调用子组件的数据，需要先在子组件显示的暴露出来，才能够正确的拿到，这个操作，就是由 defineExpose 来完成。")]),t._v(" "),n("p",[t._v("子组件")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<template>\n  <p>{{name}}</p>\n</template>\n\n<script lang=\"ts\" setup>\nimport { ref } from 'vue'\n\nconst name = ref('张麻子')\nconst changeName = () => {\n  name.value = '县长'\n}\n// 将方法、变量暴露给父组件使用，父组件才可通过 ref API拿到子组件暴露的数据\ndefineExpose({\n  name,\n  changeName\n})\n<\/script>\n")])])]),n("p",[t._v("父组件")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<template>\n  <div>\n    <child ref='childRef' />\n    <button @click=\"getName\">获取子组件中的数据</button>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { ref } from 'vue'\nimport child from './Child.vue'\n\n// 子组件ref（TypeScript语法）\nconst childRef = ref<InstanceType<typeof child>>()\n\nconst getName = () => {\n  // 获取子组件name\n  console.log(childRef.value!.name)\n  // 执行子组件方法\n  childRef.value?.changeName()\n  // 获取修改后的name\n  console.log(childRef.value!.name)\n}\n<\/script>\n")])])]),n("blockquote",[n("p",[t._v("注意：defineProps 、defineEmits 、 defineExpose 和 withDefaults 这四个宏函数只能在 "),n("code",[t._v("<script setup>")]),t._v(" 中使用。他们不需要导入，会随着"),n("code",[t._v("<script setup>")]),t._v("的处理过程中一起被编译。")])]),t._v(" "),n("h2",{attrs:{id:"插槽"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#插槽"}},[t._v("#")]),t._v(" 插槽")]),t._v(" "),n("p",[t._v("在 Vue2 的中一般中具名插槽和作用域插槽分别使用slot和slot-scope来实现，如：")]),t._v(" "),n("p",[t._v("父组件")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<template>\n  <div>\n    <p style="color:red">父组件</p>\n    <Child ref=\'childRef\'>\n      <template slot="content" slot-scope="{ msg }">\n        <div>{{ msg }}</div>\n      </template>\n    </Child>\n  </div>\n</template>\n\n<script lang="ts" setup>\nimport Child from \'./Child.vue\'\n<\/script>\n')])])]),n("p",[t._v("子组件")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<template>\n  <div>child</div>\n  <slot name="content" msg="hello 啊，树哥!"></slot>\n</template>\n')])])]),n("p",[t._v("在 Vue3 中将slot和slot-scope进行了合并统一使用，使用 v-slot， "),n("code",[t._v("v-slot:slotName")]),t._v(" 简写 "),n("code",[t._v("#slotName")])]),t._v(" "),n("p",[t._v("父组件")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<template>\n  <div>\n    <p style="color:red">父组件</p>\n    <Child>\n      <template  v-slot:content="{ msg }">\n        <div>{{ msg }}</div>\n      </template>\n    </Child>\n  </div>\n</template>\n\n<script lang="ts" setup>\nimport Child from \'./Child.vue\'\n<\/script>\n\n\x3c!-- 简写 --\x3e\n<Child>\n  <template #content="{ msg }">\n    <div>{{ msg }}</div>\n      </template>\n</Child>\n')])])]),n("blockquote",[n("p",[t._v("实际上,v-slot 在 Vue2.6+ 的版本就可以使用。")])]),t._v(" "),n("h2",{attrs:{id:"异步组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#异步组件"}},[t._v("#")]),t._v(" 异步组件")]),t._v(" "),n("p",[t._v("通过 defineAsyncComponent 异步加载")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<template>\n  <Children :msg="msg" :list="list" @changeMsg="changeMsg"></Children>\n</template>\n\n<script setup lang="ts">\nimport { ref, reactive,defineAsyncComponent } from \'vue\'\n// import Children from \'./Children.vue\'\nconst Children = defineAsyncComponent(() => import(\'./Children.vue\'))\n<\/script>\n')])])]),n("h2",{attrs:{id:"suspense"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#suspense"}},[t._v("#")]),t._v(" Suspense")]),t._v(" "),n("p",[t._v("Suspense 允许应用程序在等待异步组件时渲染一些其它内容,在 Vue2 中，必须使用条件判断(例如 v-if、 v-else等)来检查数据是否已加载并显示一些其它内容；但是，在 Vue3 新增了 Suspense 了，就不必跟踪何时加载数据并呈现相应的内容。")]),t._v(" "),n("p",[t._v("他是一个带插槽的组件，只是它的插槽指定了default 和 fallback 两种状态。")]),t._v(" "),n("p",[t._v("Suspense 使用：")]),t._v(" "),n("ul",[n("li",[t._v("1、使用 "),n("code",[t._v("<Suspense></Suspense>")]),t._v(" 包裹所有异步组件相关代码")]),t._v(" "),n("li",[t._v("2、"),n("code",[t._v("<template v-slot:default></template>")]),t._v(" 插槽包裹异步组件")]),t._v(" "),n("li",[t._v("3、"),n("code",[t._v("<template v-slot:fallback></template>")]),t._v(" 插槽包裹渲染异步组件渲染之前的内容")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<template>\n  <Suspense>\n    <template #default>\n      \x3c!-- 异步组件-默认渲染的页面 --\x3e\n      <Children :msg="msg" :list="list" @changeMsg="changeMsg"></Children>\n    </template>\n    <template #fallback>\n      \x3c!-- 页面还没加载出来展示的页面 --\x3e\n      <div>loading...</div>\n    </template>\n  </Suspense>\n</template>\n\n<script setup lang="ts">\nimport { ref, reactive, defineAsyncComponent } from \'vue\'\nconst Children = defineAsyncComponent(() => import(\'./Children.vue\'))\n<\/script>\n')])])]),n("h2",{attrs:{id:"teleport传送组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#teleport传送组件"}},[t._v("#")]),t._v(" Teleport传送组件")]),t._v(" "),n("p",[t._v("Teleport 是一种能够将我们的模板渲染至指定DOM节点，不受父级style、v-show等属性影响，但data、prop数据依旧能够共用的技术")]),t._v(" "),n("p",[t._v("主要解决的问题：因为Teleport节点挂载在其他指定的DOM节点下，完全不受父级style样式影响")]),t._v(" "),n("p",[t._v("使用：\n通过to 属性插入到指定元素位置，如 body，html，自定义className等等。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<template>\n  \x3c!-- 插入至 body --\x3e\n  <Teleport to="body">\n    <Children></Children>\n  </Teleport>\n  \x3c!-- 默认 #app 下 --\x3e\n  <Children></Children>\n</template>\n<script lang="ts" setup>\nimport Children from \'./Children.vue\'\n<\/script>\n')])])]),n("p",[n("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b45c3137623a4f8ca1a41f65e490a61a~tplv-k3u1fbpfcp-watermark.image?",alt:"Teleport.png"}})]),t._v(" "),n("h2",{attrs:{id:"keep-alive-缓存组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#keep-alive-缓存组件"}},[t._v("#")]),t._v(" keep-alive 缓存组件")]),t._v(" "),n("ul",[n("li",[t._v("作用和vue2一致，只是生命周期名称有所更改")]),t._v(" "),n("li",[t._v("初次进入时： onMounted> onActivated")]),t._v(" "),n("li",[t._v("退出后触发 deactivated")]),t._v(" "),n("li",[t._v("再次进入：只会触发 onActivated")])]),t._v(" "),n("blockquote",[n("p",[t._v("事件挂载的方法等，只执行一次的放在 onMounted中；组件每次进去执行的方法放在 onActivated中")])]),t._v(" "),n("h2",{attrs:{id:"provide-inject"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#provide-inject"}},[t._v("#")]),t._v(" provide/inject")]),t._v(" "),n("p",[t._v("provide 可以在祖先组件中指定我们想要提供给后代组件的数据或方法，而在任何后代组件中，我们都可以使用 inject 来接收 provide 提供的数据或方法。")]),t._v(" "),n("p",[t._v("父组件")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<template>\n  <Children></Children>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, provide } from 'vue'\nimport Children from \"./Children.vue\"\n\nconst msg = ref('hello 啊，树哥')\n\nprovide('msg', msg)\n<\/script>\n")])])]),n("p",[t._v("子组件")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<template>\n  <div>\n    <p>msg：{{msg}}</p>\n    <button @click=\"onChangeMsg\">改变msg</button>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { inject, Ref, ref } from 'vue'\n\nconst msg = inject<Ref<string>>('msg',ref('hello啊！'))\nconst onChangeMsg = () => {\n  msg.value = 'shuge'\n}\n<\/script>\n")])])]),n("blockquote",[n("p",[t._v("如果你想要传入的值能响应式的改变，需要通过ref 或 reactive 添加响应式")])]),t._v(" "),n("h2",{attrs:{id:"v-model-升级"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#v-model-升级"}},[t._v("#")]),t._v(" v-model 升级")]),t._v(" "),n("p",[t._v("v-model 在vue3可以说是破坏式更新，改动还是不少的")]),t._v(" "),n("p",[t._v("我们都知道，v-model 是props 和 emit 组合而成的语法糖,vue3中 v-model 有以下改动")]),t._v(" "),n("ul",[n("li",[t._v("变更：value => modelValue")]),t._v(" "),n("li",[t._v("变更：update:input => update:modelValue")]),t._v(" "),n("li",[t._v("新增：一个组件可以设置多个 v-model")]),t._v(" "),n("li",[t._v("新增：开发者可以自定义 v-model修饰符")]),t._v(" "),n("li",[t._v("v-bind 的 .sync 修饰符和组件的 model 选项已移除")])]),t._v(" "),n("p",[t._v("子组件")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<template>\n  <div>\n    <p>{{msg}}，{{modelValue}}</p>\n    <button @click=\"onChangeMsg\">改变msg</button>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n\ntype Props = {\n  modelValue: string,\n  msg: string\n}\ndefineProps<Props>()\nconst emit = defineEmits(['update:modelValue', 'update:msg'])\n\nconst onChangeMsg = () => {\n  // 触发父组件的值更新\n  emit('update:modelValue', '恰如此时此刻')\n  emit('update:msg', '彼时彼刻')\n}\n<\/script>\n")])])]),n("p",[t._v("父组件")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<template>\n  // v-model:modelValue简写为v-model\n  // 绑定多个v-model\n  <Children v-model="name" v-model:msg="msg"></Children>\n</template>\n\n<script setup lang="ts">\nimport { ref } from \'vue\'\nimport Children from "./Children.vue"\n\nconst msg = ref(\'hello啊\')\nconst name = ref(\'树哥\')\n<\/script>\n')])])]),n("h2",{attrs:{id:"自定义指令"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义指令"}},[t._v("#")]),t._v(" 自定义指令")]),t._v(" "),n("p",[t._v("自定义指令的生命周期")]),t._v(" "),n("ul",[n("li",[t._v("created 元素初始化的时候")]),t._v(" "),n("li",[t._v("beforeMount 指令绑定到元素后调用 只调用一次")]),t._v(" "),n("li",[t._v("mounted 元素插入父级dom调用")]),t._v(" "),n("li",[t._v("beforeUpdate 元素被更新之前调用")]),t._v(" "),n("li",[t._v("update 这个周期方法被移除 改用updated")]),t._v(" "),n("li",[t._v("beforeUnmount 在元素被移除前调用")]),t._v(" "),n("li",[t._v("unmounted 指令被移除后调用 只调用一次")])]),t._v(" "),n("p",[t._v("实现一个自定义拖拽指令")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<template>\n  <div v-move class="box">\n    <div class="header"></div>\n    <div>\n      内容\n    </div>\n  </div>\n</template>\n \n<script setup lang=\'ts\'>\nimport { Directive } from "vue";\nconst vMove: Directive = {\n  mounted(el: HTMLElement) {\n    let moveEl = el.firstElementChild as HTMLElement;\n    const mouseDown = (e: MouseEvent) => {\n      //鼠标点击物体那一刻相对于物体左侧边框的距离=点击时的位置相对于浏览器最左边的距离-物体左边框相对于浏览器最左边的距离\n      console.log(e.clientX, e.clientY, "起始位置", el.offsetLeft);\n      let X = e.clientX - el.offsetLeft;\n      let Y = e.clientY - el.offsetTop;\n      const move = (e: MouseEvent) => {\n        el.style.left = e.clientX - X + "px";\n        el.style.top = e.clientY - Y + "px";\n        console.log(e.clientX, e.clientY, "位置改变");\n      };\n      document.addEventListener("mousemove", move);\n      document.addEventListener("mouseup", () => {\n        document.removeEventListener("mousemove", move);\n      });\n    };\n    moveEl.addEventListener("mousedown", mouseDown);\n  },\n};\n<\/script>\n \n<style >\n.box {\n  position: fixed;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  width: 200px;\n  height: 200px;\n  border: 1px solid #ccc;\n}\n\n.header {\n  height: 20px;\n  background: black;\n  cursor: move;\n}\n</style>\n')])])]),n("h2",{attrs:{id:"自定义-hooks"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义-hooks"}},[t._v("#")]),t._v(" 自定义 hooks")]),t._v(" "),n("p",[t._v("我们都知道在 vue 中有个东西叫 mixins，他可以将多个组件中相同的逻辑抽离出来，实现一次写代码，多组件受益的效果。")]),t._v(" "),n("p",[t._v("但是 mixins 的副作用就是引用的多了变量的来源就不清晰了，而且还会有变量来源不明确,不利于阅读，容易使代码变得难以维护。")]),t._v(" "),n("ul",[n("li",[t._v("Vue3 的 hook函数 相当于 vue2 的 mixin, 不同在与 hooks 是函数")]),t._v(" "),n("li",[t._v("Vue3 的 hook函数 可以帮助我们提高代码的复用性, 让我们能在不同的组件中都利用 hooks 函数")])]),t._v(" "),n("p",[n("strong",[t._v("useWindowResize")])]),t._v(" "),n("p",[t._v("我们来实现一个窗口改变时获取宽高的 hook")]),t._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" onMounted"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" onUnmounted"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ref "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"vue"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("useWindowResize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" width "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ref")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" height "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ref")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("onResize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    width"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" window"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerWidth"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    height"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" window"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerHeight"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("onMounted")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    window"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"resize"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" onResize"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("onResize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("onUnmounted")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    window"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeEventListener")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"resize"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" onResize"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    width"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    height\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" useWindowResize"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("使用：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<template>\n  <h3>屏幕尺寸</h3>\n  <div>宽度：{{ width }}</div>\n  <div>高度：{{ height }}</div>\n</template>\n\n<script setup lang="ts">\nimport useWindowResize from "../hooks/useWindowResize.ts";\nconst { width, height } = useWindowResize();\n<\/script>\n')])])]),n("h2",{attrs:{id:"style-v-bind-css变量注入"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#style-v-bind-css变量注入"}},[t._v("#")]),t._v(" style v-bind CSS变量注入")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<template>\n  <span> style v-bind CSS变量注入</span>  \n</template>\n<script lang=\"ts\" setup>\n  import { ref } from 'vue'\n  const color = ref('red')\n<\/script>\n<style scoped>\n  span {\n    /* 使用v-bind绑定组件中定义的变量 */\n    color: v-bind('color');\n  }  \n</style>\n")])])]),n("h2",{attrs:{id:"参考"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://blog.csdn.net/lgno2/article/details/109446711",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vue3使用TypeScript的正确姿势"),n("OutboundLink")],1),t._v(" "),n("br"),t._v(" "),n("a",{attrs:{href:"https://juejin.cn/post/7122760155707473956",target:"_blank",rel:"noopener noreferrer"}},[t._v("超极速的Vue3上手指北🔥"),n("OutboundLink")],1),t._v(" "),n("br"),t._v(" "),n("a",{attrs:{href:"https://juejin.cn/post/6940454764421316644#heading-26",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vue3.0 新特性以及使用经验总结"),n("OutboundLink")],1),t._v(" "),n("br"),t._v(" "),n("a",{attrs:{href:"https://xiaoman.blog.csdn.net/article/details/123228132?spm=1001.2014.3001.5502",target:"_blank",rel:"noopener noreferrer"}},[t._v("自定义指令directive"),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"往期回顾"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#往期回顾"}},[t._v("#")]),t._v(" 往期回顾")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://juejin.cn/post/7124117404187099172",target:"_blank",rel:"noopener noreferrer"}},[t._v("2022年了，我才开始学 typescript ，晚吗？（7.5k字总结）"),n("OutboundLink")],1),t._v(" "),n("br"),t._v(" "),n("a",{attrs:{href:"https://juejin.cn/post/7127925414885851144",target:"_blank",rel:"noopener noreferrer"}},[t._v("当我们对组件二次封装时我们在封装什么"),n("OutboundLink")],1),t._v(" "),n("br"),t._v(" "),n("a",{attrs:{href:"https://juejin.cn/post/7119018849353072677",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue 项目开发，我遇到了这些问题"),n("OutboundLink")],1),t._v(" "),n("br"),t._v(" "),n("a",{attrs:{href:"https://juejin.cn/post/7117515006714839047",target:"_blank",rel:"noopener noreferrer"}},[t._v("关于首屏优化，我做了哪些"),n("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=s.exports}}]);