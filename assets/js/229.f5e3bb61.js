(window.webpackJsonp=window.webpackJsonp||[]).push([[229],{947:function(e,a,t){"use strict";t.r(a);var n=t(13),r=Object(n.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"搭建基本的前端开发环境"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#搭建基本的前端开发环境"}},[e._v("#")]),e._v(" 搭建基本的前端开发环境")]),e._v(" "),t("p",[e._v("我们日常使用的前端开发环境应该是怎样的？我们可以尝试着把基本前端开发环境的需求列一下：")]),e._v(" "),t("ul",[t("li",[e._v("构建我们发布需要的 HTML、CSS、JS 文件")]),e._v(" "),t("li",[e._v("使用 CSS 预处理器来编写样式")]),e._v(" "),t("li",[e._v("处理和压缩图片")]),e._v(" "),t("li",[e._v("使用 Babel 来支持 ES 新特性")]),e._v(" "),t("li",[e._v("本地提供静态服务以方便开发调试")])]),e._v(" "),t("p",[e._v("上述几项应该可以满足比较简单的前端项目开发环境需求了，下面会一一介绍如何配置 webpack 来满足这些需求。")]),e._v(" "),t("h2",{attrs:{id:"关联-html"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关联-html"}},[e._v("#")]),e._v(" 关联 HTML")]),e._v(" "),t("p",[e._v("webpack 默认从作为入口的 .js 文件进行构建（更多是基于 SPA 去考虑），但通常一个前端项目都是从一个页面（即 HTML）出发的，最简单的方法是，创建一个 HTML 文件，使用 "),t("code",[e._v("script")]),e._v(" 标签直接引用构建好的 JS 文件，如：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<script src="./dist/bundle.js"><\/script>\n\n')])])]),t("p",[e._v("但是，如果我们的文件名或者路径会变化，例如使用 "),t("code",[e._v("[hash]")]),e._v(" 来进行命名，那么最好是将 HTML 引用路径和我们的构建结果关联起来，这个时候我们可以使用 "),t("a",{attrs:{href:"https://doc.webpack-china.org/plugins/html-webpack-plugin/",target:"_blank",rel:"noopener noreferrer"}},[e._v("html-webpack-plugin"),t("OutboundLink")],1),e._v("。")]),e._v(" "),t("p",[e._v("html-webpack-plugin 是一个独立的 node package，所以在使用之前我们需要先安装它，把它安装到项目的开发依赖中：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("npm install html-webpack-plugin -D \n\n# 或者\nyarn add html-webpack-plugin -D\n\n")])])]),t("p",[e._v("然后在 webpack 配置中，将 html-webpack-plugin 添加到 plugins 列表中：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const HtmlWebpackPlugin = require('html-webpack-plugin')\n\nmodule.exports = {\n  // ...\n  plugins: [\n    new HtmlWebpackPlugin(),\n  ],\n}\n\n")])])]),t("p",[e._v("这样配置好之后，构建时 html-webpack-plugin 会为我们创建一个 HTML 文件，其中会引用构建出来的 JS 文件。实际项目中，默认创建的 HTML 文件并没有什么用，我们需要自己来写 HTML 文件，可以通过 html-webpack-plugin 的配置，传递一个写好的 HTML 模板：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("module.exports = {\n  // ...\n  plugins: [\n    new HtmlWebpackPlugin({\n      filename: 'index.html', // 配置输出文件名和路径\n      template: 'assets/index.html', // 配置文件模板\n    }),\n  ],\n}\n\n")])])]),t("p",[e._v("这样，通过 html-webpack-plugin 就可以将我们的页面和构建 JS 关联起来，回归日常，从页面开始开发。如果需要添加多个页面关联，那么实例化多个 html-webpack-plugin， 并将它们都放到 "),t("code",[e._v("plugins")]),e._v(" 字段数组中就可以了。")]),e._v(" "),t("p",[e._v("更多配置这里就不展开讲解了，参考文档 "),t("a",{attrs:{href:"https://github.com/jantimon/html-webpack-plugin",target:"_blank",rel:"noopener noreferrer"}},[e._v("html-webpack-plugin"),t("OutboundLink")],1),e._v(" 以及官方提供的例子 "),t("a",{attrs:{href:"https://github.com/jantimon/html-webpack-plugin/tree/master/examples",target:"_blank",rel:"noopener noreferrer"}},[e._v("html-webpack-plugin/examples"),t("OutboundLink")],1),e._v("。")]),e._v(" "),t("h2",{attrs:{id:"构建-css"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构建-css"}},[e._v("#")]),e._v(" 构建 CSS")]),e._v(" "),t("p",[e._v("我们编写 CSS，并且希望使用 webpack 来进行构建，为此，需要在配置中引入 loader 来解析和处理 CSS 文件：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("module.exports = {\n  module: {\n    rules: [\n      // ...\n      {\n        test: /\\.css/,\n        include: [\n          path.resolve(__dirname, 'src'),\n        ],\n        use: [\n          'style-loader',\n          'css-loader',\n        ],\n      },\n    ],\n  }\n}\n\n")])])]),t("blockquote",[t("p",[e._v("style-loader 和 css-loader 都是单独的 node package，需要安装。")])]),e._v(" "),t("p",[e._v("我们创建一个 index.css 文件，并在 index.js 中引用它，然后进行构建。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('import "./index.css"\n\n')])])]),t("p",[e._v("可以发现，构建出来的文件并没有 CSS，先来看一下新增两个 loader 的作用：")]),e._v(" "),t("ul",[t("li",[e._v("css-loader 负责解析 CSS 代码，主要是为了处理 CSS 中的依赖，例如 "),t("code",[e._v("@import")]),e._v(" 和 "),t("code",[e._v("url()")]),e._v(" 等引用外部文件的声明；")]),e._v(" "),t("li",[e._v("style-loader 会将 css-loader 解析的结果转变成 JS 代码，运行时动态插入 "),t("code",[e._v("style")]),e._v(" 标签来让 CSS 代码生效。")])]),e._v(" "),t("p",[e._v("经由上述两个 loader 的处理后，CSS 代码会转变为 JS，和 index.js 一起打包了。如果需要单独把 CSS 文件分离出来，我们需要使用 "),t("a",{attrs:{href:"https://doc.webpack-china.org/plugins/extract-text-webpack-plugin",target:"_blank",rel:"noopener noreferrer"}},[e._v("extract-text-webpack-plugin"),t("OutboundLink")],1),e._v(" 插件。")]),e._v(" "),t("p",[e._v("extract-text-webpack-plugin 这个插件在笔者写作时并未发布支持 webpack 4.x 的正式版本，所以安装的时候需要指定使用它的 alpha 版本："),t("code",[e._v("npm install extract-text-webpack-plugin@next -D")]),e._v(" 或者 "),t("code",[e._v("yarn add extract-text-webpack-plugin@next -D")]),e._v("。如果你用的是 webpack 3.x 版本，直接用 extract-text-webpack-plugin 现有的版本即可。")]),e._v(" "),t("p",[e._v("看一个简单的例子：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const ExtractTextPlugin = require('extract-text-webpack-plugin')\n\nmodule.exports = {\n  // ...\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        // 因为这个插件需要干涉模块转换的内容，所以需要使用它对应的 loader\n        use: ExtractTextPlugin.extract({ \n          fallback: 'style-loader',\n          use: 'css-loader',\n        }), \n      },\n    ],\n  },\n  plugins: [\n    // 引入插件，配置文件名，这里同样可以使用 [hash]\n    new ExtractTextPlugin('index.css'),\n  ],\n}\n\n")])])]),t("h2",{attrs:{id:"css-预处理器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#css-预处理器"}},[e._v("#")]),e._v(" CSS 预处理器")]),e._v(" "),t("p",[e._v("在上述使用 CSS 的基础上，通常我们会使用 Less/Sass 等 CSS 预处理器，webpack 可以通过添加对应的 loader 来支持，以使用 Less 为例，我们可以在官方文档中找到对应的 "),t("a",{attrs:{href:"https://doc.webpack-china.org/loaders/less-loader",target:"_blank",rel:"noopener noreferrer"}},[e._v("loader"),t("OutboundLink")],1),e._v("。")]),e._v(" "),t("p",[e._v("我们需要在上面的 webpack 配置中，添加一个配置来支持解析后缀为 .less 的文件：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("module.exports = {\n  // ...\n  module: {\n    rules: [\n      {\n        test: /\\.less$/,\n        // 因为这个插件需要干涉模块转换的内容，所以需要使用它对应的 loader\n        use: ExtractTextPlugin.extract({ \n          fallback: 'style-loader',\n          use: [\n            'css-loader', \n            'less-loader',\n          ],\n        }), \n      },\n    ],\n  },\n  // ...\n}\n\n")])])]),t("h2",{attrs:{id:"处理图片文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#处理图片文件"}},[e._v("#")]),e._v(" 处理图片文件")]),e._v(" "),t("p",[e._v("在前端项目的样式中总会使用到图片，虽然我们已经提到 css-loader 会解析样式中用 "),t("code",[e._v("url()")]),e._v(" 引用的文件路径，但是图片对应的 jpg/png/gif 等文件格式，webpack 处理不了。是的，我们只要添加一个处理图片的 loader 配置就可以了，现有的 file-loader 就是个不错的选择。")]),e._v(" "),t("p",[e._v("file-loader 可以用于处理很多类型的文件，它的主要作用是直接输出文件，把构建后的文件路径返回。配置很简单，在 "),t("code",[e._v("rules")]),e._v("中添加一个字段，增加图片类型文件的解析配置：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("module.exports = {\n  // ...\n  module: {\n    rules: [\n      {\n        test: /\\.(png|jpg|gif)$/,\n        use: [\n          {\n            loader: 'file-loader',\n            options: {},\n          },\n        ],\n      },\n    ],\n  },\n}\n\n")])])]),t("p",[e._v("更多关于 file-loader 的配置可以参考官方文档 "),t("a",{attrs:{href:"https://webpack.js.org/loaders/file-loader/",target:"_blank",rel:"noopener noreferrer"}},[e._v("file-loader"),t("OutboundLink")],1),e._v("。")]),e._v(" "),t("h2",{attrs:{id:"使用-babel"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-babel"}},[e._v("#")]),e._v(" 使用 Babel")]),e._v(" "),t("p",[t("a",{attrs:{href:"http://babeljs.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Babel"),t("OutboundLink")],1),e._v(" 是一个让我们能够使用 ES 新特性的 JS 编译工具，我们可以在 webpack 中配置 Babel，以便使用 ES6、ES7 标准来编写 JS 代码。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("module.exports = {\n  // ...\n  module: {\n    rules: [\n      {\n        test: /\\.jsx?/, // 支持 js 和 jsx\n        include: [\n          path.resolve(__dirname, 'src'), // src 目录下的才需要经过 babel-loader 处理\n        ],\n        loader: 'babel-loader',\n      },\n    ],\n  },\n}\n\n")])])]),t("p",[e._v("Babel 的相关配置可以在目录下使用 .babelrc 文件来处理，详细参考 Babel 官方文档 "),t("a",{attrs:{href:"http://babeljs.io/docs/usage/babelrc/",target:"_blank",rel:"noopener noreferrer"}},[e._v(".babelrc"),t("OutboundLink")],1),e._v("。")]),e._v(" "),t("h2",{attrs:{id:"启动静态服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启动静态服务"}},[e._v("#")]),e._v(" 启动静态服务")]),e._v(" "),t("p",[e._v("至此，我们完成了处理多种文件类型的 webpack 配置。我们可以使用 "),t("a",{attrs:{href:"https://github.com/webpack/webpack-dev-server",target:"_blank",rel:"noopener noreferrer"}},[e._v("webpack-dev-server"),t("OutboundLink")],1),e._v(" 在本地开启一个简单的静态服务来进行开发。")]),e._v(" "),t("p",[e._v("在项目下安装 webpack-dev-server，然后添加启动命令到 package.json 中：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('"scripts": {\n  "build": "webpack --mode production",\n  "start": "webpack-dev-server --mode development"\n}\n\n')])])]),t("blockquote",[t("p",[e._v("也可以全局安装 webpack-dev-server，但通常建议以项目开发依赖的方式进行安装，然后在 npm package 中添加启动脚本。")])]),e._v(" "),t("p",[e._v("尝试着运行 "),t("code",[e._v("npm run start")]),e._v(" 或者 "),t("code",[e._v("yarn start")]),e._v("，然后就可以访问 http://localhost:8080/ 来查看你的页面了。默认是访问 index.html，如果是其他页面要注意访问的 URL 是否正确。")]),e._v(" "),t("h2",{attrs:{id:"小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[e._v("#")]),e._v(" 小结")]),e._v(" "),t("p",[e._v("我们现在已经可以使用 webpack 来完成日常中需要的基础前端构建需求：构建 HTML、CSS、JS 文件、使用 CSS 预处理器来编写样式、处理和压缩图片、使用 Babel、方便开发调试的静态服务，接下来的小节会在这个基础上，深入 webpack 配置细节，结合实际工作中的一些需要，更进一步地了解 webpack 的使用。")]),e._v(" "),t("h2",{attrs:{id:"例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#例子"}},[e._v("#")]),e._v(" 例子")]),e._v(" "),t("p",[e._v("本小节提及的一些简单的 Demo 可以在 "),t("a",{attrs:{href:"https://github.com/teabyii/webpack-examples",target:"_blank",rel:"noopener noreferrer"}},[e._v("webpack-examples"),t("OutboundLink")],1),e._v(" 找到。")])])}),[],!1,null,null,null);a.default=r.exports}}]);